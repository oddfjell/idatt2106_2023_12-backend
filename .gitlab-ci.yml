image: maven:3-jdk-11

# This template will build and test your project
# * It caches downloaded dependencies and plugins between invocation.
# * NOTE: there is NO deployment of created artifacts in this case, because every student doesn't have an own server/VM,
#   and to the best of my knowledge, there is no Docker repository running at IDI (yet) for us to use.

variables:
  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  SPRING_PROFILES_ACTIVE: gitlab-ci # NB!! THIS ONE'S IMPORTANT!

stages:
  - test
  - package
  - wiki to pdf

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
# Note! Caching will only happen with successful builds!
cache:
  paths:
    - .m2/repository
  key: "$CI_BUILD_REF_NAME"


# This where the magic happens
test:jdk11:
  stage: test
  script:
    - mvn -f smartmat/pom.xml clean test
  artifacts:
    when: always
    paths:
      - target/site/jacoco # We need to save the HTML-reports that Jacoco produces, so we can serve it on Gitlab Pages in the next stage
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
        - target/failsafe-reports/TEST-*.xml
  when: always


# This is purely for exemplification, and does probably not hold a whole lot of value for the IDATT2106 project. Still,
# this will make the JAR produced from the Maven build available for download
package:jdk17:
    stage: package
    script:
      - mvn -DskipTests package # We already know the tests passed from the previous stage
    artifacts: # Make the JAR from the build available in Gitlab
      paths:
        - target/*.jar # Add more as needed here
#      expire_in: 69 days
    only:
      - master # We don't want to do this on feature branches

# This is a particularly nasty way of generating a PDF of the wiki, due to how much it downloads/installs.
# Therefore, the only way to run it, is to push the "Run pipeline" button (CI/CD -> Pipelines) in the web UI.
# It's also commented out, since we don't really want it enabled until we need it (ie. at the end of the project),
# to ease the taxing the of build servers.
# DO NOTE: the PDF produced will not be perfect, since reflowing HTML to PDF perfectly isn't really possible, so 
# there will be some aestethic blemishes, but it should do just fine for our use case.
#
# The artifact produced can be downloaded from the CI/CI -> Piplines page, and is called "generatepdf"
generatepdf:
  image: ubuntu:20.04  # vi kjører dette i en docker container, som kjører Ubuntu Linux
  stage: test # vi kjører den parallelt med å publisere javadoc til Pages
  script:
    - apt-get update  # apt-get er en pakkehåndterer som kan laste ned og installere pakker på linux-system
    - apt-get install -y wget  # installerer et tool som heter "wget", som kan fyre av HTML-requester på kommandolinja
    - apt-get install -y fontconfig libfreetype6 libjpeg-turbo8 libpng16-16 libx11-6 libxcb1 libxext6 libxrender1 xfonts-75dpi xfonts-base  # installerer en bunsj med libs vi trenger for konverteringen til PDF
    - wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.focal_amd64.deb  # Henter HTML-til-PDF-konverterer fra git. Vi bruker denne spesifikke pakken fordi vi vet at den fungerer i miljøet vi kjører i
    - dpkg -i wkhtmltox_0.12.6-1.focal_amd64.deb  # Installerer pakken vi lastet ned i forrige steg
    - apt-get -y install nodejs  # installerer nodejs
    - apt-get -y install npm  # installerer npm, som er en pakkehåndterer (litt likt apt-get) for (hovedsaklig) javascript-biblioteker
    - npm install -g github-wikito-converter  # installerer wiki-til-html-konverterer via npm 
    - apt-get -y install git  # installerer git
    - export my_url="${CI_PROJECT_URL:8}" # Fjerner https:// fra URLen
    - export final_url="https://gitlab-ci-token:$CI_JOB_TOKEN@$my_url"  # Bruker CI-token for å omgå krav til brukernavn/passord
    - git clone "$final_url.wiki.git"  # hver eneste gitlab-wiki ligger i et eget repo, og kan klones med git som man kloner andre prosjekter
    - gwtc $CI_PROJECT_TITLE.wiki  # NB! DERSOM DENNE FEILER, ERSTATT MED NAVNET PÅ REPOET (enkelte gitlab-instanser ser ut til å gi #denne feil verdi for gruppeprosjekter)
    - wkhtmltopdf documentation.html wiki.pdf  # Dette konverterer fra HTML til PDF
  artifacts:
    paths:
        - wiki.pdf  # Vi gjør fila tilgjengelig som en nedlastbar artefakt (CI/CD -> Pipelines, deretter ikon helt til høyre for #bygget). Fila kalles wiki.pdf.
  only:
    - web  # Only web gjør at vi kun kjører denne delen av pipeline når en trykker på knappen "Run pipeline"

# We move the code coverage reports generated by jacoco (see pom.xml) to be served by Gitlab Pages (Settings -> Pages)
pages:
  image: alpine:latest
  stage: package
  script:
    - mv target/site/jacoco public
  artifacts:
    paths:
      - public
  only:
    - master
